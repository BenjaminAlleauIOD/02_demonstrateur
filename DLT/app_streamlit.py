# Importation des biblioth√®ques n√©cessaires
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.ensemble import IsolationForest
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import pickle
from PIL import Image

#import seaborn as sns
import plotly.express as px
from function_prediction import *
# Charger les donn√©es
donn√©es = pd.read_pickle("dataset_moteurs_enrichi.pkl")

# configuration de la page
st.set_page_config(layout="wide")

# Ajout du logo
img_logo = Image.open("Logo_Iod_solutions_Horizontal_Logo_Complet_Original_RVB_1186px@72ppi (1).png")
st.sidebar.image(img_logo)


page = st.sidebar.radio("Naviguer", ['Suivi de la performance industrielle', 'Suivi des anomalies','Pr√©diction'])
if page == 'Suivi de la performance industrielle':
    st.title('Suivi de la performance industrielle')
    # Sidebar pour les filtres
    st.sidebar.header('Filtres')

    # Ajoutez une option 'Tous' √† vos s√©lections
    id_usine_options = ['All'] + list(donn√©es['Localisation_Usine'].unique())
    id_usine = st.sidebar.selectbox('S√©lectionnez une Usine:', id_usine_options)

    type_moteur_options = ['All'] + list(donn√©es['Type_Moteur'].unique())
    type_moteur = st.sidebar.selectbox('S√©lectionnez le type de moteur:', type_moteur_options)

    mode_expedition_options = ['All'] + list(donn√©es['Mode_Exp√©dition'].unique())
    mode_expedition = st.sidebar.selectbox("S√©lectionnez le mode d'exp√©dition", mode_expedition_options)
    # Initialisez 'donn√©es_filtr√©es' avec 'donn√©es' pour inclure tous les cas par d√©faut
    donn√©es_filtr√©es = donn√©es

    # Appliquez les filtres seulement si l'option s√©lectionn√©e n'est pas 'Tous'
    if id_usine != 'All':
        donn√©es_filtr√©es = donn√©es_filtr√©es[donn√©es_filtr√©es['Localisation_Usine'] == id_usine]

    if type_moteur != 'All':
        donn√©es_filtr√©es = donn√©es_filtr√©es[donn√©es_filtr√©es['Type_Moteur'] == type_moteur]

    if mode_expedition != 'All':
        donn√©es_filtr√©es = donn√©es_filtr√©es[donn√©es_filtr√©es['Mode_Exp√©dition'] == mode_expedition]

    # Analyse et visualisations des donn√©es...
    # Calcul des indicateurs cl√©s
    nombre_total_productions = len(donn√©es_filtr√©es)
    temps_moyen_fabrication = donn√©es_filtr√©es['Dur√©e_Fabrication'].mean()
    temps_median_fabrication = donn√©es_filtr√©es['Dur√©e_Fabrication'].median()

    nombre_total_moteur = len(donn√©es_filtr√©es["Sp√©cifications"].unique())
    temps_moyen_dlt = donn√©es_filtr√©es['DLT'].mean()
    temps_median_dlt = donn√©es_filtr√©es['DLT'].median()

    # Affichage des indicateurs cl√©s dans des boxs avec des titres, valeurs et ic√¥nes
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric(label="Nombre Total Productions üè≠", value=f"{nombre_total_productions}")
        
    with col2:
        st.metric(label="Temps Moyen Fabrication ‚è≥", value=f"{temps_moyen_fabrication:.2f} h")
        
    with col3:
        st.metric(label="Temps M√©dian Fabrication ‚åõ", value=f"{temps_median_fabrication:.2f} h")

    with col1:
        st.metric(label="Nombre Total Moteurs üè≠", value=f"{nombre_total_moteur}")
        
    with col2:
        st.metric(label="Temps Moyen DLT ‚è≥", value=f"{temps_moyen_dlt:.2f} h")
        
    with col3:
        st.metric(label="Temps M√©dian DLT ‚åõ", value=f"{temps_median_dlt:.2f} h")


    # Suivi de l'√©volution du DLT
    st.header('Suivi de l\'√©volution du DLT')
    # Assurez-vous que les dates sont au bon format
    donn√©es_filtr√©es['Date_D√©but_Fabrication'] = pd.to_datetime(donn√©es_filtr√©es['Date_D√©but_Fabrication'])
    donn√©es_filtr√©es.sort_values('Date_D√©but_Fabrication', inplace=True)

    donn√©es_filtr√©es['Date'] = pd.to_datetime(donn√©es_filtr√©es['Date_D√©but_Fabrication'])

    # S√©lection du type de donn√©e √† visualiser: DLT ou Temps de Fabrication
    type_donn√©e = st.radio("S√©lectionnez le type de donn√©e √† visualiser:", ('DLT', 'Temps de Fabrication'),horizontal=True)
    colonne_donn√©e = 'DLT' if type_donn√©e == 'DLT' else 'Dur√©e_Fabrication'

    # Agr√©gation des donn√©es par mois et par localisation d'usine
    # Note : 'Grouper' permet de grouper par p√©riodes; ici, nous utilisons 'M' pour mois
    donn√©es_mensuelles = donn√©es_filtr√©es.groupby([pd.Grouper(key='Date', freq='M'), 'Localisation_Usine'])[colonne_donn√©e].mean().reset_index()

    # Lissage des donn√©es agr√©g√©es si n√©cessaire (facultatif, d√©pend de la quantit√© de donn√©es et de la pr√©f√©rence visuelle)
    # Par exemple, utiliser une moyenne mobile simple sur les donn√©es agr√©g√©es
    donn√©es_mensuelles[f'{colonne_donn√©e}_Liss√©'] = donn√©es_mensuelles.groupby('Localisation_Usine')[colonne_donn√©e].transform(lambda x: x.rolling(window=3, min_periods=1).mean())

    # Cr√©ation du graphique interactif avec Plotly Express
    fig = px.line(donn√©es_mensuelles, x='Date', y=f'{colonne_donn√©e}_Liss√©', color='Localisation_Usine',
                labels={f'{colonne_donn√©e}_Liss√©': f'{type_donn√©e} (liss√©, mensuel)'},
                title=f'Courbe liss√©e et agr√©g√©e du {type_donn√©e} par Localisation d\'Usine')

    # Am√©liorer la mise en forme du graphique
    fig.update_layout(xaxis_title='Date', yaxis_title=f'{type_donn√©e} (moyenne mensuelle)', xaxis=dict(rangeslider=dict(visible=True), type="date"))

    # Afficher le graphique dans Streamlit
    st.plotly_chart(fig)



    # Classement des usines...
    # Affichage des classements
    st.subheader(f'Classement')

    col1, col2 = st.columns(2)
    # Option pour choisir le crit√®re d'agr√©gation dans la sidebar
    with col1 : 
        option_agr√©gation = st.selectbox(
        'Choisissez la variable pour agr√©ger les donn√©es:',
        ('Localisation_Usine', 'Type_Moteur', 'Sp√©cifications'))

    # Choix des m√©triques pour le classement
    with col2 :
        option_metric = st.selectbox(
        'Choisissez la m√©trique pour le classement:',
        ('Temps de Fabrication', 'DLT'))

    # Filtrer les donn√©es en cons√©quence (en supposant que donn√©es_filtr√©es est d√©j√† d√©fini)
    # Calcul des moyennes pour le crit√®re s√©lectionn√©
    if option_metric == 'Temps de Fabrication':
        moyennes = donn√©es_filtr√©es.groupby(option_agr√©gation)['Dur√©e_Fabrication'].mean().sort_values(ascending=False)
    else:
        moyennes = donn√©es_filtr√©es.groupby(option_agr√©gation)['DLT'].mean().sort_values(ascending=False)



    # D√©finition de la colonne de donn√©es en fonction du choix de m√©trique
    colonne_donn√©e = 'Dur√©e_Fabrication' if option_metric == 'Temps de Fabrication' else 'DLT'

    # Calcul des moyennes pour le crit√®re s√©lectionn√© et tri pour le classement
    moyennes = donn√©es_filtr√©es.groupby(option_agr√©gation)[colonne_donn√©e].mean().sort_values(ascending=True).reset_index()

    # Cr√©ation du graphique avec Plotly Express
    fig = px.bar(moyennes, y=option_agr√©gation, x=colonne_donn√©e, orientation='h',
                title=f'Classement par {option_agr√©gation} bas√© sur {option_metric}',
                labels={colonne_donn√©e: 'Moyenne', option_agr√©gation: option_agr√©gation},
                color=colonne_donn√©e,
                color_continuous_scale=px.colors.sequential.Viridis)

    # Am√©lioration de la mise en page du graphique
    fig.update_layout(xaxis_title='Moyenne', yaxis_title=option_agr√©gation)

    # Afficher le graphique dans Streamlit
    st.plotly_chart(fig)

elif page=="Suivi des anomalies" :
    st.title('Suivi des anomalies')

    # Clustering...

    # D√©tection d'anomalies
    # Identification des anomalies selon les crit√®res d√©finis
    col1, col2 = st.columns(2)
    with col1 : 
        seuil_dlt = st.sidebar.number_input('Seuil pour le DLT (h)', min_value=0, value=40)
    with col2 : 
        seuil_fabrication = st.sidebar.number_input('Seuil pour la dur√©e de fabrication (h)', min_value=0, value=25)
    donn√©es['Anomalie'] = (donn√©es['DLT'] > seuil_dlt) | (donn√©es['Dur√©e_Fabrication'] > seuil_fabrication)
    
    # Conversion des dates en mois (format p√©riode) puis en cha√Æne de caract√®res pour la s√©rialisation
    donn√©es['Mois'] = donn√©es['Date_D√©but_Fabrication'].dt.to_period('M').astype(str)
    
    # Agr√©gation du nombre d'anomalies par mois et par usine
    anomalies_agr√©g√©es = donn√©es.groupby(['Mois', 'Localisation_Usine'])['Anomalie'].sum().reset_index()
    
    # Pr√©paration des donn√©es pour la visualisation avec Plotly
    fig = px.bar(anomalies_agr√©g√©es, x='Mois', y='Anomalie', color='Localisation_Usine', 
                 labels={'Anomalie':'Nombre d\'anomalies'}, title='Nombre d\'anomalies par mois et par usine')
    fig.update_xaxes(categoryorder='category ascending')  # Assure l'ordre chronologique des mois
    col1, col2 = st.columns([2,1])
    with col1 :
        st.plotly_chart(fig,use_container_width=True)


    # Affichage du tableau r√©capitulatif
    anomalies_par_usine = donn√©es.groupby('Localisation_Usine')['Anomalie'].sum().reset_index()
    with col2 :
        st.dataframe(anomalies_par_usine)

    # Calcul du total de productions par mois et par usine pour le calcul des pourcentages
    total_productions = donn√©es.groupby(['Mois', 'Localisation_Usine']).size().reset_index(name='Total_Productions')

    # Fusion des anomalies agr√©g√©es avec le total de productions
    anomalies_pourcentage = pd.merge(anomalies_agr√©g√©es, total_productions, on=['Mois', 'Localisation_Usine'])
    
    # Calcul du pourcentage d'anomalies
    anomalies_pourcentage['Pourcentage_Anomalies'] = (anomalies_pourcentage['Anomalie'] / anomalies_pourcentage['Total_Productions']) * 100

    # Pr√©paration des donn√©es pour la visualisation avec Plotly
    fig = px.line(anomalies_pourcentage, x='Mois', y='Pourcentage_Anomalies', color='Localisation_Usine',
                  labels={'Pourcentage_Anomalies':'Pourcentage d\'anomalies', 'Mois':'Mois'}, title='Pourcentage d\'anomalies par mois et par usine')
    fig.update_layout(xaxis_title='Mois', yaxis_title='Pourcentage d\'anomalies', xaxis=dict(rangeslider=dict(visible=True), type="date"))
    col1, col2 = st.columns([2,1])
    with col1 :
        st.plotly_chart(fig,use_container_width=True)
    anomalies_par_usine_pourc = donn√©es.groupby('Localisation_Usine')['Anomalie'].mean().reset_index()
    with col2 :
        st.dataframe(anomalies_par_usine_pourc)

else :
    # Pr√©dictions...
    st.title('Pr√©diction et D√©tection d\'anomalies')
    # Calcul de la conformit√© pour chaque jour
    id_usine_options = ['All'] + list(donn√©es['Localisation_Usine'].unique())
    id_usine = st.sidebar.selectbox('S√©lectionnez une Usine:', id_usine_options)
    
    if id_usine!='All':
        donn√©es_filtr√©es = donn√©es[donn√©es["Localisation_Usine"]==id_usine]
    else :
        donn√©es_filtr√©es = donn√©es.copy()

    last_month = donn√©es_filtr√©es['Date_D√©but_Fabrication'].dt.month.max()
    donn√©es_last_month = donn√©es_filtr√©es[donn√©es_filtr√©es['Date_D√©but_Fabrication'].dt.month == last_month]

    def check_compliance(row):
        return row['DLT_lower_bound'] <= row['DLT'] <= row['DLT_upper_bound']

    # Application de la v√©rification
    donn√©es_last_month['Compliance'] = donn√©es_last_month.apply(check_compliance, axis=1)

    # Calcul du pourcentage de conformit√© par jour
    compliance_daily = 100 - (donn√©es_last_month.groupby(donn√©es_last_month['Date_D√©but_Fabrication'].dt.date)['Compliance'].mean() * 100)
    compliance_daily = compliance_daily.sort_index()

    # Affichage des r√©sultats
    st.write(f"Anomalie des DLT par jour pour le dernier mois ({last_month}):")
    col1,col2 = st.columns(2)
    for day, compliance in compliance_daily.items():
        if compliance < 85 :
            # Ins√®re un √©motic√¥ne de warning si la compliance est inf√©rieure √† 85%
            with col1 : 
                emoji = "‚ö†Ô∏è"  # √âmotic√¥ne de warning
                st.markdown(f"Date: `{day}` - Conformit√©: `{compliance:.2f}%` {emoji}", unsafe_allow_html=True)
        else:
            # Ins√®re un "V" vert (coche) si la compliance est de 50% ou plus
            emoji = "‚úÖ"  # √âmotic√¥ne de coche verte

    ## ajout d'un graphique 
    compliance_daily_df = pd.DataFrame({
        'Date': compliance_daily.index,
        'Conformit√©': compliance_daily.values
    })

    # Cr√©ation du graphique de l'√©volution de la conformit√© avec Plotly
    fig = px.line(compliance_daily_df, x='Date', y='Conformit√©',
                  title='√âvolution de la Conformit√© sur le Dernier Mois',
                  labels={'Conformit√©': 'Pourcentage de Non-Conformit√© (%)', 'Date': 'Date'},
                  markers=True)  # Ajoute des marqueurs pour chaque point de donn√©e
    fig.add_hline(y=85, line_dash="dot",
                  annotation_text="Seuil de 85%",
                  annotation_position="bottom right",
                  line_color="red")

    # Am√©lioration de la mise en forme du graphique
    fig.update_layout(xaxis_title='Date',
                      yaxis_title='Pourcentage de Non-Conformit√© (%)',
                      xaxis=dict(rangeslider=dict(visible=True), type="date"))

    # Affichage du graphique dans Streamlit
    with col2 : 
        st.plotly_chart(fig, use_container_width=True)

    # Affichage 
    # Assurez-vous d'avoir import√© matplotlib.pyplot comme plt

    # Calcul du pourcentage d'anomalies par usine
    pourcentage_anomalies_par_usine = donn√©es.groupby('Localisation_Usine')['Incidents_Fabrication'].mean() * 100

    # Calcul du DLT moyen par usine
    dlt_moyen_par_usine = donn√©es.groupby('Localisation_Usine')['DLT'].mean()

    # Cr√©ation d'un DataFrame pour le graphique
    data_for_plot = pd.DataFrame({
        'Pourcentage d\'anomalies': pourcentage_anomalies_par_usine,
        'DLT moyen': dlt_moyen_par_usine
    }).reset_index()

    # Cr√©ation du graphique en utilisant Plotly Express
    fig = px.scatter(data_for_plot, 
                    x='Pourcentage d\'anomalies', 
                    y='DLT moyen', 
                    text='Localisation_Usine',
                    size='DLT moyen', # Optionnel: ajuste la taille des points en fonction du DLT moyen
                    hover_data=['Localisation_Usine'], # Affiche le nom de l'usine lorsque vous passez la souris sur un point
                    title='Pourcentage d\'anomalies vs DLT moyen par usine')

    fig.update_traces(textposition='top center') # Ajuste la position du texte pour la lisibilit√©
    fig.update_layout(xaxis_title='Pourcentage d\'anomalies (%)',
                    yaxis_title='DLT moyen (heures)',
                    xaxis=dict(showgrid=True),
                    yaxis=dict(showgrid=True))

    # Afficher le graphique dans Streamlit
    st.plotly_chart(fig)


        

            

